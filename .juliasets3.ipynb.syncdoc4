{"notebook_name":"juliasets3.ipynb"}
"class JuliaSet():\n    \n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    \n    def __init__(self, c, n=100): # This is the data for the class - \n        self.c = c     \n        self.n = n\n        self._d = 0.001\n        self.lowrange = -2\n        self.highrange = 2\n        self.set = [ ]\n        self._complexplane = [ ]\n    \n    def juliamap(self, z) : # This is the method for the class \n        return (z**2 + self.c)\n    \n\n    def  iterate(self, z):  # This is the method for the class\n        m = 0\n        while True:\n            z = self.juliamap(z)\n            m = m+1\n            if abs(z) > self.highrange :\n                return(m)\n            elif m >= self.n :\n                return(0)\n\n            \n    def create_complexplane(self,lowrange, highrange, d) :\n        list1 = [ ]\n        coun = self.np.arange(lowrange,highrange,d)\n        list1=[complex(x,y) for x in coun for y in coun]\n        return list1 \n    \n\n    def set_spacing(self, lowrange, highrange, d) : # This is the method for the class \n        self.lowrange = lowrange\n        self.highrange = highrange\n        self._d = d\n        self._complexplane = self.create_complexplane(self.lowrange,self.highrange,self._d)\n        #print self._complexplane  # to troubleshoot the code\n   \n    def generate(self) :\n        self.set_spacing(self.lowrange, self.highrange, self._d)\n        for complex_number in self._complexplane:\n             self.set.append(self.iterate(complex_number))\n        return self.set"︡{"metadata":{"collapsed":false,"trusted":true},"cell_type":"code","execution_count":24,"outputs":[]}
"j = JuliaSet(1+1j)\n#print j.create_complexplane(-2,2,0.5)\nj.set_spacing(-3,3,0.5)\nprint j._complexplane\nprint j.generate()"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":27,"outputs":[{"output_type":"stream","text":"[(-3-3j), (-3-2.5j), (-3-2j), (-3-1.5j), (-3-1j), (-3-0.5j), (-3+0j), (-3+0.5j), (-3+1j), (-3+1.5j), (-3+2j), (-3+2.5j), (-2.5-3j), (-2.5-2.5j), (-2.5-2j), (-2.5-1.5j), (-2.5-1j), (-2.5-0.5j), (-2.5+0j), (-2.5+0.5j), (-2.5+1j), (-2.5+1.5j), (-2.5+2j), (-2.5+2.5j), (-2-3j), (-2-2.5j), (-2-2j), (-2-1.5j), (-2-1j), (-2-0.5j), (-2+0j), (-2+0.5j), (-2+1j), (-2+1.5j), (-2+2j), (-2+2.5j), (-1.5-3j), (-1.5-2.5j), (-1.5-2j), (-1.5-1.5j), (-1.5-1j), (-1.5-0.5j), (-1.5+0j), (-1.5+0.5j), (-1.5+1j), (-1.5+1.5j), (-1.5+2j), (-1.5+2.5j), (-1-3j), (-1-2.5j), (-1-2j), (-1-1.5j), (-1-1j), (-1-0.5j), (-1+0j), (-1+0.5j), (-1+1j), (-1+1.5j), (-1+2j), (-1+2.5j), (-0.5-3j), (-0.5-2.5j), (-0.5-2j), (-0.5-1.5j), (-0.5-1j), (-0.5-0.5j), (-0.5+0j), (-0.5+0.5j), (-0.5+1j), (-0.5+1.5j), (-0.5+2j), (-0.5+2.5j), -3j, -2.5j, -2j, -1.5j, -1j, -0.5j, 0j, 0.5j, 1j, 1.5j, 2j, 2.5j, (0.5-3j), (0.5-2.5j), (0.5-2j), (0.5-1.5j), (0.5-1j), (0.5-0.5j), (0.5+0j), (0.5+0.5j), (0.5+1j), (0.5+1.5j), (0.5+2j), (0.5+2.5j), (1-3j), (1-2.5j), (1-2j), (1-1.5j), (1-1j), (1-0.5j), (1+0j), (1+0.5j), (1+1j), (1+1.5j), (1+2j), (1+2.5j), (1.5-3j), (1.5-2.5j), (1.5-2j), (1.5-1.5j), (1.5-1j), (1.5-0.5j), (1.5+0j), (1.5+0.5j), (1.5+1j), (1.5+1.5j), (1.5+2j), (1.5+2.5j), (2-3j), (2-2.5j), (2-2j), (2-1.5j), (2-1j), (2-0.5j), (2+0j), (2+0.5j), (2+1j), (2+1.5j), (2+2j), (2+2.5j), (2.5-3j), (2.5-2.5j), (2.5-2j), (2.5-1.5j), (2.5-1j), (2.5-0.5j), (2.5+0j), (2.5+0.5j), (2.5+1j), (2.5+1.5j), (2.5+2j), (2.5+2.5j)]\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 0, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 2, 1, 1, 1, 1, 3, 0, 3, 2, 3, 0, 3, 1, 1, 1, 1, 2, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n","name":"stdout"}]}
""︡{"metadata":{"trusted":true,"collapsed":true},"cell_type":"code","execution_count":null,"outputs":[]}