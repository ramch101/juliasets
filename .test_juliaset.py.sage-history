"from juliaset import JuliaSet\nfrom random import uniform, randint\nfrom math import sqrt\nfrom nose import with_setup\n\n###\n# Test Suite for specified JuliaSet interface\n#\n# Run with the command: \"nosetests juliatests.py\"\n###\n\n\n# Custom random numbers\n\ndef rand_range():\n    \"\"\"Return a random complex number bounded by real and imaginary axes [-2, 2]\"\"\"\n    return (uniform(-2,2) + uniform(-2,2)*1j)\n\ndef rand_circle():\n    \"\"\"Return a random complex number within the unit circle\"\"\"\n    r = uniform(-1,1)\n    dr = sqrt(1 - r**2)\n    i = uniform(-dr, dr)\n    return (r + i*1j)\n\n# Test classes for several cases\n    \nclass TestRandomC:\n    \"\"\"Define a julia set with a random c seed value, test interface\"\"\"\n    \n    def setup(self):\n        \"\"\"Setup fixture is run before every test method separately\"\"\"\n        self.c = rand_range()\n        self.n = randint(2,100)\n        self.j = JuliaSet(self.c, self.n)\n        \n    def test_c_value(self):\n        \"\"\"Test that c is an attribute\"\"\"\n        assert self.j.c == self.c\n    \n    def test_n_value(self):\n        \"\"\"Test that n is an attribute\"\"\"\n        assert self.j.n == self.n\n    \n    def test_juliamap(self):\n        \"\"\"Test that juliamap is implemented properly\"\"\"\n        z = rand_range()\n        print \"z = \", z\n        print \"z**2 = \", z**2\n        zcorrect = z**2 + self.c\n        print \"z**2 + c = \", zcorrect\n        znew = self.j.juliamap(z)\n        print \"juliamap(z) = \", znew\n        assert znew == zcorrect\n    \n    def test_set_spacing(self):\n        \"\"\"Test that changing spacing works\"\"\"\n        print \"Test original spacing _d = 0.001\"\n        assert self.j._d == 0.001\n        print \"Test new spacing of _d = 0.1\"\n        self.j.set_spacing(0.1)\n        print \"_d = \", self.j._d\n        assert self.j._d == 0.1\n        print \"Test that complex plane is regenerated\"\n        print \"This is the complex plane\", self.j._complexplane\n        print \"len(_complexplane) = \", len(self.j._complexplane)\n        print \"int(4.0 / 0.1)**2 = \", int(4.0 / 0.1)**2\n        assert len(self.j._complexplane) == int(4.0 / 0.1)**2\n    \n    def test_generate(self):\n        \"\"\"Test that generating the julia set works\"\"\"\n        self.j.set_spacing(0.1)\n        self.j.generate()\n        print \"Test that j.set exists, and is of the same length as j._complexplane\"\n        assert (len(self.j.set) == len(self.j._complexplane))\n\nclass TestTrivial:\n    \"\"\"Test that a seed value of c=0 leaves the unit circle invariant\"\"\"\n    \n    @classmethod\n    def setup_class(cls):\n        cls.j = JuliaSet(0)\n    \n    def test_trivial_seed(self):\n        def check_z(z):\n            \"\"\"Test all z inside unit circle return 0\"\"\"\n            m = TestTrivial.j.iterate(z)\n            print \"m = \", m\n            assert m == 0\n        # A generator like this runs a test for every yield\n        for _ in xrange(100):\n            z = rand_circle()\n            yield check_z, z\n\nclass TestHuge:\n    \"\"\"Test that a huge seed always causes a divergence after 1 iteration\"\"\"\n    \n    @classmethod\n    def setup_class(cls):\n        cls.j = JuliaSet(16)\n    \n    def test_huge_seed(self):\n        def check_z(z):\n            \"\"\"Test all z escape after 1 iteration\"\"\"\n            print \"z = \", z\n            print \"z**2 = \", z**2\n            print \"z**2 + c = \", z**2 + 16\n            print \"juliamap(z) = \", TestHuge.j.juliamap(z)\n            assert TestHuge.j.iterate(z) == 1\n        # Again, a generator runs a test for every yield\n        for _ in xrange(100):\n            z = rand_range()\n            yield check_z, z\n\n"
{"patch":[[[[0,"juliaset"],[1,"s"],[0," import "]],5,5,16,17]],"time":1443763908193}
{"patch":[[[[0,"juliaset"],[-1,"s"],[0," import "]],5,5,17,16]],"time":1443763894325}
{"patch":[[[[0,"JuliaSet"],[1,"s"],[0,"\nfrom ra"]],21,21,16,17]],"time":1443763847096}
{"patch":[[[[0,"uliaSets"],[1,"2"],[0,"\nfrom ra"]],22,22,16,17]],"time":1443763845098}
{"patch":[[[[0,"JuliaSet"],[-1,"s"],[0,"2\nfrom r"]],21,21,17,16]],"time":1443763732308}
{"patch":[[[[0,"JuliaSet"],[-1,"2"],[0,"\nfrom ra"]],21,21,17,16]],"time":1443763691884}
{"patch":[[[[0,"_d == 0."],[1,"00"],[0,"1\n      "]],1771,1771,16,18]],"time":1443676871660}
{"patch":[[[[0,"j.set_spacing(0."],[1,"00"],[0,"1)\n        print"]],1697,1697,32,34]],"time":1443676869657}
{"patch":[[[[0,"ing(0.00"],[1,"0"],[0,"1)\n     "]],1707,1707,16,17]],"time":1443676867655}
{"patch":[[[[0,"ing(0.00"],[-1,"0"],[0,"1)\n     "]],1707,1707,17,16]],"time":1443676865696}
{"patch":[[[[0," self.j._d == 0."],[-1,"0"],[0,"01\n        print"]],1765,1765,33,32]],"time":1443676844620}
{"patch":[[[[0,"_d == 0."],[-1,"0"],[0,"1\n      "]],1773,1773,17,16]],"time":1443676842615}
{"patch":[[[[0,"acing(0."],[-1,"0"],[0,"01)\n    "]],1705,1705,17,16]],"time":1443676839528}
{"patch":[[[[0,"acing(0."],[-1,"0"],[0,"1)\n     "]],1705,1705,17,16]],"time":1443676837568}
{"patch":[[[[0,"_d == 0."],[1,"0"],[0,"1\n      "]],1771,1771,16,17]],"time":1443676813976}
{"patch":[[[[0,"_d == 0."],[1,"0"],[0,"01\n     "]],1771,1771,16,17]],"time":1443676811912}
{"patch":[[[[0," self.j._d == 0."],[-1,"0"],[0,"01\n        print"]],1763,1763,33,32]],"time":1443676787740}
{"patch":[[[[0,"_d == 0."],[-1,"0"],[0,"1\n      "]],1771,1771,17,16]],"time":1443676785494}
{"patch":[[[[0,"(4.0 / 0.1)*"],[-1,"*2"],[0,"\n        ass"]],2006,2006,26,24]],"time":1443675203729}
{"patch":[[[[0,"0 / 0.1)"],[-1,"*"],[0,"\n       "]],2009,2009,17,16]],"time":1443675201727}
{"patch":[[[[0," / 0.1)*"],[-1,"*2"],[0,"\n    \n  "]],2069,2069,18,16]],"time":1443674314154}
{"patch":[[[[0,"0 / 0.1)"],[-1,"*"],[0,"\n    \n  "]],2068,2068,17,16]],"time":1443674312157}
{"patch":[[[[0,"t(4.0 / 0.1)"],[1,"**"],[0,"\n        ass"]],2005,2005,24,26]],"time":1443234701594}
{"patch":[[[[0,"/ 0.1)**"],[1,"2"],[0,"\n       "]],2011,2011,16,17]],"time":1443234699587}
{"patch":[[[[0,"t(4.0 / 0.1)"],[1,"**"],[0,"\n    \n    de"]],2067,2067,24,26]],"time":1443234697588}
{"patch":[[[[0,"/ 0.1)**"],[1,"2"],[0,"\n    \n  "]],2073,2073,16,17]],"time":1443234695589}
{"patch":[[[[0,"plane\", "],[-1,"self.j._complexplane"],[0,"\n       "]],1871,1871,36,16]],"time":1443233853049}
{"patch":[[[[0," plane\","],[-1," "],[0,"\n       "]],1870,1870,17,16]],"time":1443233843791}
{"patch":[[[[0,"x plane\""],[-1,","],[1,"."],[0,"\n       "]],1869,1869,17,17]],"time":1443233841794}
{"patch":[[[[0," plane\"."],[1,"format"],[0,"\n       "]],1870,1870,16,22]],"time":1443233839792}
{"patch":[[[[0,"ne\"."],[-1,"format"],[0,"\n   "]],1874,1874,14,8]],"time":1443233837788}
{"patch":[[[[0,"x plane\""],[-1,"."],[0,"\n       "]],1869,1869,17,16]],"time":1443233835788}
{"patch":[[[[0,"omplex plane"],[1," with"],[0,"\"\n        pr"]],1864,1864,24,29]],"time":1443233828788}
{"patch":[[[[0,"ane with"],[1," "],[0,"\"\n      "]],1873,1873,16,17]],"time":1443233826819}
{"patch":[[[[0,"x plane "],[-1,"with "],[0,"\"\n      "]],1869,1869,21,16]],"time":1443233821977}
{"patch":[[[[0,"ex plane"],[-1," "],[0,"\"\n      "]],1868,1868,17,16]],"time":1443233820023}
{"patch":[[[[0,"complex plan"],[-1,"e"],[0,"\"\n        pr"]],1863,1863,25,24]],"time":1443233814939}
{"patch":[[[[0,"is the c"],[-1,"omplex plan"],[0,"\"\n      "]],1856,1856,27,16]],"time":1443233810918}
{"patch":[[[[0,"his "],[-1,"i"],[0,"s"],[1,"i"],[0," th"],[-1,"e"],[0," c\"\n"]],1852,1852,14,13]],"time":1443233808920}
{"patch":[[[[0,"nt \""],[-1,"This si th c"],[0,"\"\n  "]],1847,1847,20,8]],"time":1443233806899}
{"patch":[[[[0," pri"],[-1,"nt \"\""],[0,"\n   "]],1843,1843,13,8]],"time":1443233804900}
{"patch":[[[[0,"        "],[-1,"pri"],[0,"\n       "]],1836,1836,19,16]],"time":1443233802901}
{"patch":[[[[0,"erated\"\n"],[-1,"        \n"],[0,"        "]],1828,1828,25,16]],"time":1443233800898}
{"patch":[[[[0,"0.1)**2\n    "],[1,"#"],[0,"    assert l"]],1949,1949,24,25]],"time":1443233727758}
{"patch":[[[[0,"**2\n    "],[-1,"#"],[0,"    asse"]],1953,1953,17,16]],"time":1443233679446}